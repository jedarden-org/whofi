name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # ESP32 Firmware Build and Test
  firmware-test:
    runs-on: jedarden-org-apexalgo-iad-runners
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Install ESP-IDF Prerequisites
      run: |
        sudo apt-get update
        sudo apt-get install -y git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0
    
    - name: Install ESP-IDF
      run: |
        mkdir -p ~/esp
        cd ~/esp
        git clone -b v5.1.2 --recursive https://github.com/espressif/esp-idf.git
        cd esp-idf
        ./install.sh esp32,esp32s3
    
    - name: Build ESP32 Firmware
      working-directory: csi-firmware
      run: |
        . ~/esp/esp-idf/export.sh
        idf.py build
    
    - name: Check Firmware Size Compatibility
      working-directory: csi-firmware
      run: |
        chmod +x check_firmware_size.sh
        ./check_firmware_size.sh
    
    - name: Run Firmware Tests
      working-directory: csi-firmware
      run: |
        . ~/esp/esp-idf/export.sh
        cd test
        chmod +x run_tests.sh
        ./run_tests.sh

  # Docker Server Build and Test
  server-test:
    runs-on: jedarden-org-apexalgo-iad-runners
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: csi-server/backend/package-lock.json
    
    - name: Install Backend Dependencies
      working-directory: csi-server/backend
      run: npm ci
    
    - name: Run Backend Tests
      working-directory: csi-server/backend
      run: npm test
    
    - name: Setup Node.js for Frontend
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: csi-server/frontend/package-lock.json
    
    - name: Install Frontend Dependencies
      working-directory: csi-server/frontend
      run: npm ci
    
    - name: Run Frontend Tests
      working-directory: csi-server/frontend
      run: npm test -- --watchAll=false

  # Build Docker Images
  docker-build:
    needs: [firmware-test, server-test]
    runs-on: jedarden-org-apexalgo-iad-runners
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and Push Backend Image
      uses: docker/build-push-action@v4
      with:
        context: csi-server
        file: csi-server/backend/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/whofi-backend:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/whofi-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v4
      with:
        context: csi-server
        file: csi-server/frontend/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/whofi-frontend:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ github.repository_owner }}/whofi-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Kubernetes (Optional)
  deploy:
    needs: docker-build
    runs-on: jedarden-org-apexalgo-iad-runners
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    env:
      REGISTRY: ghcr.io
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Kubernetes
      run: |
        # Update image tags in Kubernetes manifests
        kubectl set image deployment/whofi-backend \
          backend=${{ env.REGISTRY }}/${{ github.repository_owner }}/whofi-backend:${{ github.sha }} \
          -n whofi-production || echo "Deployment not found"
        
        kubectl set image deployment/whofi-frontend \
          frontend=${{ env.REGISTRY }}/${{ github.repository_owner }}/whofi-frontend:${{ github.sha }} \
          -n whofi-production || echo "Deployment not found"
    
    - name: Wait for rollout
      run: |
        kubectl rollout status deployment/whofi-backend -n whofi-production || true
        kubectl rollout status deployment/whofi-frontend -n whofi-production || true

  # Security Scanning
  security-scan:
    runs-on: jedarden-org-apexalgo-iad-runners
    steps:
    - uses: actions/checkout@v3
    
    - name: Run npm audit
      working-directory: csi-server/backend
      run: npm audit --audit-level=moderate || true
    
    - name: Run frontend security scan
      working-directory: csi-server/frontend
      run: npm audit --audit-level=moderate || true